import random # random 라이브러리 불러오기

while True:  # 게임을 계속 반복
    computer_number = random.randint(1, 10)  # 컴퓨터가 1부터 10 까지의 숫자를 랜덤으로 선택
    print("1과 10 사이의 숫자를 하나 정했습니다.") # 입력 안내 문구 출력
    print("이 숫자는 무엇일까요?") # 입력 안내 문구 출력

    while True:  # 플레이어가 숫자를 맞출 때까지 반복
        player_input = input("예상 숫자: ")  # 플레이어로부터 숫자 입력 받기

        if not player_input.isdigit():  # 입력이 숫자가 아닌 경우 (유효성검사)
            print("숫자를 입력해주세요.") # 안내 문구를 출력
            continue  # 루프문으로 처음으로 돌아감

        player_number = int(player_input)  # 입력을 정수로 변환

        if not (1 <= player_number <= 10):  # 입력이 1에서 10 사이가 아닌 경우 (유효성검사)
            print("숫자를 1에서 10 사이로 입력해주세요.") # 안내 문구를 출력
            continue # 루프문으로 처음으로 돌아감


        if player_number == computer_number:  # 플레이어가 숫자를 맞춘 경우 (유효성검사 통과 후)
            print("정답입니다!") # 해당문구를 출력
            break # 숫자맞추기 반복 종료후 다음루프로
        elif player_number > computer_number:  # 입력한 숫자가 큰 경우
            print("너무 큽니다. 다시 입력하세요.") # 안내 문구를 출력하고 루프
        else:  # 입력한 숫자가 작은 경우
            print("너무 작습니다. 다시 입력하세요.") # 안내 문구를 출력하고 다시 루프

    while True:  # 게임을 다시 할지 물어봄
        play_again = input("게임을 다시하시겠습니까? (y/n): ").lower() # 플레이어로 부터 계속할지 입력받기
        if play_again in ['y', 'n']:  # 입력이 y,n인지 확인 (유효성검사)
            break # 입력이 y거나 n이면 유효성검사 루프 탈출
        print("y 또는 n을 입력해주세요.") # 입력이 y,n중에 없으면 안내 문구 출력

    if play_again == 'n':  # 입력값이 n이면 게임 종료, y였다면 맨처음 루프로 이동해서 게임 다시 반복
        print('게임을 종료합니다. 즐거우셨나요? 또 만나요!')
        break # 입력값이 n이면 게임반복루프 탈출후 게임종료

### 내가 문제를 풀 때 사용한 방법 정리

#### **1. `random` 모듈을 사용한 랜덤 숫자 생성**
- **사용한 방법**: 
  ```python
  computer_number = random.randint(1, 10)
  ```
- **목적**: 
  - 컴퓨터가 예측 불가능한 숫자를 선택하도록 설정.
  - `random.randint()`를 사용해 1부터 10 사이의 정수를 랜덤하게 생성.

---

#### **2. 반복 구조 (`while True`) 사용**
- **사용한 방법**: 
  ```python
  while True:
      # 게임 반복 및 내부 로직
  ```
- **목적**: 
  - 게임 전체 흐름과 내부의 숫자 맞추기 로직을 반복적으로 실행.
  - 조건에 따라 반복문을 `break`로 종료하거나 다시 시작.

---

#### **3. 사용자 입력 유효성 검사**
- **사용한 방법**: 
  - **숫자인지 확인**:
    ```python
    if not player_input.isdigit():
        print("숫자를 입력해주세요.")
        continue
    ```
  - **범위 확인**:
    ```python
    if not (1 <= player_number <= 10):
        print("숫자를 1에서 10 사이로 입력해주세요.")
        continue
    ```
- **목적**:
  - 사용자가 숫자가 아닌 값을 입력하거나 범위를 벗어난 값을 입력했을 때 올바른 메시지를 출력.
  - 잘못된 입력에 대해 반복문을 다시 시작하도록 설정.

---

#### **4. 숫자 비교 및 피드백 제공**
- **사용한 방법**: 
  ```python
  if player_number == computer_number:
      print("정답입니다!")
      break
  elif player_number > computer_number:
      print("너무 큽니다. 다시 입력하세요.")
  else:
      print("너무 작습니다. 다시 입력하세요.")
  ```
- **목적**: 
  - 사용자가 입력한 숫자와 컴퓨터가 선택한 숫자를 비교.
  - 결과에 따라 적절한 피드백 메시지를 출력:
    - 정답일 경우 반복 종료.
    - 오답일 경우 크거나 작은 방향성을 힌트로 제공.

---

#### **5. 게임 재시작 여부 확인**
- **사용한 방법**:
  ```python
  while True:
      play_again = input("게임을 다시하시겠습니까? (y/n): ").lower()
      if play_again in ['y', 'n']:
          break
      print("y 또는 n을 입력해주세요.")
  if play_again == 'n':
      print("게임을 종료합니다. 즐거우셨나요? 또 만나요!")
      break
  ```
- **목적**:
  - 사용자가 게임을 계속할지 여부를 결정.
  - `y` 입력 시 게임을 초기화하여 반복을 재개, `n` 입력 시 종료.
  - 잘못된 입력에 대해 유효성 검사와 안내 메시지를 출력.

---

#### **6. 메시지를 통한 사용자 가이드**
- **사용한 방법**:
  ```python
  print("1과 10 사이의 숫자를 하나 정했습니다.")
  print("이 숫자는 무엇일까요?")
  ```
  - 플레이어가 무엇을 해야 하는지 명확히 안내.
- **목적**:
  - 게임의 진행 상황과 요구사항을 플레이어에게 알림.
  - 잘못된 입력이나 숫자 범위를 벗어난 경우 상세한 메시지를 통해 문제를 수정할 기회를 제공.

---

#### **7. 게임 종료와 루프 관리**
- **사용한 방법**:
  - 내부의 숫자 맞추기 루프를 맞추기 성공 시 `break`로 종료:
    ```python
    if player_number == computer_number:
        break
    ```
  - 게임 종료를 위한 외부 루프 관리:
    ```python
    if play_again == 'n':
        break
    ```
- **목적**:
  - 특정 조건(정답 맞추기, `n` 입력)이 충족되면 적절히 반복을 종료하여 게임 흐름을 제어.

---

### **전체 요약**
1. **`random` 모듈**을 활용해 컴퓨터의 랜덤 숫자를 생성.
2. **`while True`** 구조를 통해 게임을 반복 실행.
3. 사용자 입력에 대해 **유효성 검사**를 통해 잘못된 입력 처리.
4. 입력 숫자와 컴퓨터 숫자를 비교해 힌트를 제공.
5. 사용자가 원할 경우 게임을 재시작할 수 있도록 기능 추가.
6. 적절한 **안내 메시지**를 통해 사용자 친화적인 인터페이스 제공.

